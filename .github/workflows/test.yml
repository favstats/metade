name: VPN Rotation on Push

on:
  push:
    branches:
      - main  # Runs only when pushing to main
  schedule:
    - cron: '0 8 * * *'  # Runs every day at 08:00 UTC

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}      
      TELEGRAM_BOT_ID: ${{ secrets.TELEGRAM_BOT_ID }}
      TELEGRAM_GROUP_ID: ${{ secrets.TELEGRAM_GROUP_ID }}

    steps:
      - name: Setup - Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Restore R Package Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/R
          key: ${{ runner.os }}-r-packages-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: |
            ${{ runner.os }}-r-packages-

      - name: Ensure Docker is Running
        run: |
          sudo systemctl restart docker || echo "Docker restart failed"
          sudo docker info || echo "Docker is not running!"

      - name: Run NordVPN Container with Random Country
        env:
          NORDVPN_TOKEN: ${{ secrets.NORDVPN_TOKEN }}
        run: |
          # Define a list of available countries
          COUNTRIES=("United_States" "Canada" "Germany" "France" "Netherlands" "Australia" "Japan" "Sweden" "Spain")
      
          # Pick a random country from the list
          RANDOM_COUNTRY=${COUNTRIES[$RANDOM % ${#COUNTRIES[@]}]}
      
          echo "Selected VPN Country: $RANDOM_COUNTRY"
      
          # Start NordVPN Docker container with the selected random country
          docker run -d --name nordvpn --cap-add=NET_ADMIN --cap-add=NET_RAW \
            -e TOKEN=$NORDVPN_TOKEN \
            -e CONNECT=$RANDOM_COUNTRY \
            -e TECHNOLOGY=NordLynx \
            ghcr.io/bubuntux/nordvpn

      - name: Wait for VPN to Establish
        run: |
          for i in {1..10}; do
            VPN_STATUS=$(docker exec nordvpn nordvpn status 2>&1 || echo "Error")
            echo "VPN Status Output: $VPN_STATUS"

            if echo "$VPN_STATUS" | grep -q "Connected"; then
              echo "‚úÖ VPN Connected!"
              break
            fi

            echo "‚è≥ Waiting for VPN... Attempt $i/10"
            sleep 3
          done

          # Final Check: Fail if VPN never connected
          VPN_STATUS_FINAL=$(docker exec nordvpn nordvpn status 2>&1 || echo "Error")
          if ! echo "$VPN_STATUS_FINAL" | grep -q "Connected"; then
            echo "‚ùå VPN failed to connect after 10 attempts."
            exit 1
          fi

      - name: Apt-get update things
        run: sudo apt-get update 

      - name: Apt-get needed things
        run: |
          sudo apt-get install --no-install-recommends -y \
          libssl-dev \
          libcurl4-openssl-dev \
          libxml2-dev \
          libharfbuzz-dev \
          libfribidi-dev \
          libudunits2-dev \
          libgdal-dev

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 1
          needs: |
            any::tidyverse
            any::httr
            any::remotes
            any::shiny
            any::scales
            any::treemap
            any::here
            any::jsonlite
            any::janitor
            any::quarto
            any::highcharter
            any::lubridate
            any::gt
            any::gtExtras
            any::pacman
            any::openxlsx
            any::sf
            any::xml2
            any::rvest
            any::reticulate
            any::fs
            any::countrycode
            any::progress
            any::cli
            any::digest
            any::glue
            any::vroom
            any::prettydoc
            any::DT
            any::piggyback
            any::httr2
            any::openssl
            any::priceR

      - name: Restore Arrow Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/arrow
          key: ${{ runner.os }}-arrow-${{ hashFiles('arrow.R') }}
          restore-keys: |
            ${{ runner.os }}-arrow-

      - name: "Install arrow"
        run: Rscript 'arrow.R'

      - name: Infinite Loop Until Success
        run: |
          # Function to fetch the current IP
          get_current_ip() {
            curl -s --max-time 5 ifconfig.me || echo "UNKNOWN"
          }

          # Initialize previous IP
          PREV_IP=$(get_current_ip)
          echo "üåç Initial IP: $PREV_IP"

          while true; do
            echo "üöÄ Running get_audiences.R..."
            Rscript 'get_audiences.R'
            EXIT_CODE=$?

            if [ -f status.txt ] && grep -q "VPN_ROTATION_NEEDED" status.txt; then
              echo "üîÑ VPN Rotation Needed! Restarting VPN..."
              docker exec nordvpn nordvpn disconnect
              sleep 5

              # Fetch list of available NordVPN countries
              echo "üåç Fetching available NordVPN countries..."
              docker exec nordvpn nordvpn countries | tail -n +2 > countries.txt

              # Extract valid country names (excluding non-country lines)
              countries=($(grep -E "^[A-Za-z ]+$" countries.txt | grep -vE "available|NordVPN" | tr -d '\r'))

              if [ "${#countries[@]}" -eq 0 ]; then
                echo "‚ùå No valid countries found! Retrying in 10 seconds..."
                sleep 10
                continue
              fi

              MAX_RETRIES=10  # Limit retries to avoid infinite loops
              retry_count=0
              success=0  # Flag to track successful IP change

              while [ "$retry_count" -lt "$MAX_RETRIES" ]; do
                # Select a random country
                RANDOM_COUNTRY=${countries[$RANDOM % ${#countries[@]}]}
                echo "üåç Attempting to connect to NordVPN server in: $RANDOM_COUNTRY"

                # Try to connect to the selected country
                {
                  docker exec nordvpn nordvpn connect "$RANDOM_COUNTRY"
                  sleep 10  # Wait for VPN to connect
                } || {
                  echo "‚ùå Failed to connect to $RANDOM_COUNTRY. Trying another..."
                  ((retry_count++))
                  sleep 5
                  continue
                }

                # Get new IP address
                NEW_IP=$(get_current_ip)

                # Check if the IP actually changed
                if [ "$NEW_IP" != "$PREV_IP" ] && [ -n "$NEW_IP" ] && [ "$NEW_IP" != "UNKNOWN" ]; then
                  echo "‚úÖ IP successfully changed! New IP: $NEW_IP"
                  PREV_IP=$NEW_IP  # Update previous IP
                  success=1  # Mark as successful
                  break
                else
                  echo "‚ùå IP did not change. Trying another country..."
                  ((retry_count++))
                  sleep 5
                fi
              done

              if [ "$success" -eq 0 ]; then
                echo "‚ùå Failed to change IP after $MAX_RETRIES attempts! Exiting..."
                exit 1
              fi

              echo "üîÑ Retrying get_audiences.R after VPN change..."
              rm status.txt  # Reset status after handling

            elif [ "$EXIT_CODE" -eq 0 ]; then
              echo "‚úÖ Script ran successfully! Exiting loop."
              break
            else
              echo "‚ùå Unexpected error: $EXIT_CODE. Retrying in 30 seconds..."
              sleep 30
            fi
          done