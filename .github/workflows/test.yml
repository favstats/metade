name: VPN Rotation and Data Update

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 8 * * *'  # Runs every day at 08:00 UTC
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}      
      TELEGRAM_BOT_ID: ${{ secrets.TELEGRAM_BOT_ID }}
      TELEGRAM_GROUP_ID: ${{ secrets.TELEGRAM_GROUP_ID }}
      R_LIBS_USER: /github/home/r-libs

    steps:
      - name: Setup - Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Restore R Package Cache
        uses: actions/cache@v3
        with:
          path: /github/home/r-libs
          key: ${{ runner.os }}-r-packages-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: |
            ${{ runner.os }}-r-packages-

      - name: Apt-get update things
        run: sudo apt-get update 

      - name: Apt-get needed things
        run: |
          sudo apt-get install --no-install-recommends -y \
          libssl-dev \
          libcurl4-openssl-dev \
          libxml2-dev \
          libharfbuzz-dev \
          libfribidi-dev \
          libudunits2-dev \
          libgdal-dev

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 1
          needs: |
            any::tidyverse
            any::httr
            any::remotes
            any::shiny
            any::scales
            any::treemap
            any::here
            any::jsonlite
            any::janitor
            any::quarto
            any::highcharter
            any::lubridate
            any::gt
            any::gtExtras
            any::pacman
            any::openxlsx
            any::sf
            any::xml2
            any::rvest
            any::reticulate
            any::fs
            any::countrycode
            any::progress
            any::cli
            any::digest
            any::glue
            any::vroom
            any::prettydoc
            any::DT
            any::piggyback
            any::httr2
            any::openssl
            any::priceR

      - name: Restore Arrow Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/arrow
          key: ${{ runner.os }}-arrow-${{ hashFiles('arrow.R') }}
          restore-keys: |
            ${{ runner.os }}-arrow-

      - name: Install arrow
        run: Rscript 'arrow.R'

      - name: Setup Docker Network
        run: docker network create vpn-network

      - name: Create R Development Container
        run: |
          cat << EOF > Dockerfile.r
          FROM rocker/r-ver:4.1.2

          RUN apt-get update && apt-get install -y \
              git \
              curl \
              libssl-dev \
              libcurl4-openssl-dev \
              libxml2-dev \
              libharfbuzz-dev \
              libfribidi-dev \
              libudunits2-dev \
              libgdal-dev

          WORKDIR /workspace

          # Install R packages
          RUN R -e 'install.packages(c( \
              "tidyverse", \
              "httr", \
              "remotes", \
              "shiny", \
              "scales", \
              "here", \
              "jsonlite", \
              "janitor", \
              "lubridate", \
              "pacman", \
              "openxlsx", \
              "xml2", \
              "rvest", \
              "reticulate", \
              "fs", \
              "countrycode", \
              "progress", \
              "cli", \
              "digest", \
              "glue", \
              "vroom", \
              "prettydoc", \
              "DT", \
              "piggyback", \
              "httr2", \
              "openssl", \
              "arrow" \
          ), repos="https://cloud.r-project.org", dependencies=TRUE)'

          EOF

          docker build -t r-dev-env -f Dockerfile.r .

      - name: Run NordVPN Container
        env:
          NORDVPN_TOKEN: ${{ secrets.NORDVPN_TOKEN }}
        run: |
          COUNTRIES=("United_States" "Canada" "Germany" "France" "Netherlands" "Australia" "Japan" "Sweden" "Spain")
          RANDOM_COUNTRY=${COUNTRIES[$RANDOM % ${#COUNTRIES[@]}]}
          echo "Selected VPN Country: $RANDOM_COUNTRY"
          
          docker run -d --name nordvpn \
            --cap-add=NET_ADMIN \
            --cap-add=NET_RAW \
            --network vpn-network \
            -e TOKEN=$NORDVPN_TOKEN \
            -e CONNECT=$RANDOM_COUNTRY \
            -e TECHNOLOGY=NordLynx \
            ghcr.io/bubuntux/nordvpn

      - name: Start R Container
        run: |
          docker run -d --name r-dev \
            --network container:nordvpn \
            -e GITHUB_PAT=${{ secrets.GH_PAT }} \
            -e TELEGRAM_BOT_ID=${{ secrets.TELEGRAM_BOT_ID }} \
            -e TELEGRAM_GROUP_ID=${{ secrets.TELEGRAM_GROUP_ID }} \
            -v ${PWD}:/workspace \
            -v /github/home/r-libs:/r-libs \
            r-dev-env tail -f /dev/null

      - name: Wait for VPN to Establish
        run: |
          for i in {1..10}; do
            VPN_STATUS=$(docker exec nordvpn nordvpn status 2>&1 || echo "Error")
            echo "VPN Status Output: $VPN_STATUS"

            if echo "$VPN_STATUS" | grep -q "Connected"; then
              echo "‚úÖ VPN Connected!"
              break
            fi

            echo "‚è≥ Waiting for VPN... Attempt $i/10"
            sleep 3
          done

          VPN_STATUS_FINAL=$(docker exec nordvpn nordvpn status 2>&1 || echo "Error")
          if ! echo "$VPN_STATUS_FINAL" | grep -q "Connected"; then
            echo "‚ùå VPN failed to connect after 10 attempts."
            exit 1
          fi

      - name: Infinite Loop Until Success
        run: |
          get_current_ip() { 
            docker exec r-dev curl -s ifconfig.me || echo "UNKNOWN"
          }
      
          PREV_IP=$(get_current_ip)
          echo "üåç Initial IP: $PREV_IP"
      
          while true; do
            echo "üöÄ Running get_audiences.R..."
            docker exec r-dev Rscript get_audiences.R
            EXIT_CODE=$?
      
            if [ -f status.txt ] && grep -q "VPN_ROTATION_NEEDED" status.txt; then
              echo "üîÑ VPN Rotation Needed! Restarting VPN..."
              
              # Function to rotate VPN connection
              rotate_vpn() {
                local max_attempts=5
                local attempt=1
                local current_ip=$(get_current_ip)
                
                while [ $attempt -le $max_attempts ]; do
                  COUNTRIES=("United_States" "Canada" "Germany" "France" "Netherlands" "Australia" "Japan" "Sweden" "Spain")
                  RANDOM_COUNTRY=${COUNTRIES[$RANDOM % ${#COUNTRIES[@]}]}
                  echo "üåç Attempt $attempt: Connecting to $RANDOM_COUNTRY"
                  
                  # Disconnect current connection
                  docker exec nordvpn nordvpn disconnect
                  sleep 5
                  
                  # Connect to new country
                  docker exec nordvpn nordvpn connect $RANDOM_COUNTRY
                  sleep 15
                  
                  # Check new IP
                  local new_ip=$(get_current_ip)
                  echo "üîé New IP: $new_ip (Previous: $current_ip)"
                  
                  if [ "$new_ip" != "$current_ip" ] && [ "$new_ip" != "UNKNOWN" ]; then
                    echo "‚úÖ VPN rotation successful!"
                    return 0
                  else
                    echo "‚ùå VPN rotation failed or IP unchanged. Attempt $attempt of $max_attempts"
                    sleep 5
                    ((attempt++))
                  fi
                done
                
                echo "‚ùå Failed to rotate VPN after $max_attempts attempts"
                return 1
              }
              
              # Try to rotate the VPN
              if ! rotate_vpn; then
                echo "‚ùå VPN rotation failed completely - exiting"
                exit 1
              fi
      
              sleep 15
      
              NEW_IP=$(get_current_ip)
              echo "üîé New IP: $NEW_IP"
      
              if [ "$NEW_IP" != "$PREV_IP" ] && [ "$NEW_IP" != "UNKNOWN" ]; then
                echo "‚úÖ Connected! New IP: $NEW_IP"
                PREV_IP=$NEW_IP
              else
                echo "‚ùå IP did not change. Retrying with another country..."
                sleep 5
                continue
              fi
      
              echo "üîÑ Retrying get_audiences.R after VPN change..."
              rm status.txt
      
            elif [ "$EXIT_CODE" -eq 0 ]; then
              echo "‚úÖ Script ran successfully! Exiting loop."
              break
            else
              echo "‚ùå Unexpected error: $EXIT_CODE. Retrying in 30 seconds..."
              sleep 30
            fi
          done
