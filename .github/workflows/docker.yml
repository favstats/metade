name: VPN Rotation and Data Update

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 8 * * *'  # Runs every day at 08:00 UTC
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}      
      TELEGRAM_BOT_ID: ${{ secrets.TELEGRAM_BOT_ID }}
      TELEGRAM_GROUP_ID: ${{ secrets.TELEGRAM_GROUP_ID }}
      R_LIBS_USER: /github/home/r-libs

    steps:
      - name: Setup - Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Create directories
        run: |
          sudo mkdir -p /github/home/r-libs
          sudo chmod 777 /github/home/r-libs
          mkdir -p data historic targeting
          chmod -R 777 .

      - name: Restore R Package Cache
        uses: actions/cache@v3
        with:
          path: /github/home/r-libs
          key: ${{ runner.os }}-r-packages-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: |
            ${{ runner.os }}-r-packages-

      # Set up Docker networking
      - name: Setup Docker Network
        run: docker network create vpn-network

      # Pull the pre-built R image
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Pre-built R Image
        run: docker pull ghcr.io/${{ github.repository }}/r-scraper:latest

      # Set up VPN container
      - name: Run NordVPN Container
        env:
          NORDVPN_TOKEN: ${{ secrets.NORDVPN_TOKEN }}
        run: |
          COUNTRIES=("United_States" "Canada" "Germany" "France" "Netherlands" "Australia" "Japan" "Sweden" "Spain")
          RANDOM_COUNTRY=${COUNTRIES[$RANDOM % ${#COUNTRIES[@]}]}
          echo "Selected VPN Country: $RANDOM_COUNTRY"
          
          docker run -d --name nordvpn \
            --cap-add=NET_ADMIN \
            --cap-add=NET_RAW \
            --network vpn-network \
            -e TOKEN=$NORDVPN_TOKEN \
            -e CONNECT=$RANDOM_COUNTRY \
            -e TECHNOLOGY=NordLynx \
            ghcr.io/bubuntux/nordvpn

      - name: Start R Container
        run: |
          docker run -d --name r-dev \
            --network container:nordvpn \
            -e GITHUB_PAT=${{ secrets.GH_PAT }} \
            -e TELEGRAM_BOT_ID=${{ secrets.TELEGRAM_BOT_ID }} \
            -e TELEGRAM_GROUP_ID=${{ secrets.TELEGRAM_GROUP_ID }} \
            -v ${PWD}/data:/workspace/data \
            -v ${PWD}/historic:/workspace/historic \
            -v ${PWD}/targeting:/workspace/targeting \
            -v /github/home/r-libs:/r-libs \
            ghcr.io/${{ github.repository }}/r-scraper:latest tail -f /dev/null

      - name: Wait for VPN to Establish
        run: |
          for i in {1..10}; do
            VPN_STATUS=$(docker exec nordvpn nordvpn status 2>&1 || echo "Error")
            echo "VPN Status Output: $VPN_STATUS"

            if echo "$VPN_STATUS" | grep -q "Connected"; then
              echo "‚úÖ VPN Connected!"
              break
            fi

            echo "‚è≥ Waiting for VPN... Attempt $i/10"
            sleep 3
          done

          VPN_STATUS_FINAL=$(docker exec nordvpn nordvpn status 2>&1 || echo "Error")
          if ! echo "$VPN_STATUS_FINAL" | grep -q "Connected"; then
            echo "‚ùå VPN failed to connect after 10 attempts."
            exit 1
          fi

      - name: Infinite Loop Until Success
        run: |
          start_time=$(date +%s)  # Record the start time

          get_current_ip() { 
            docker exec r-dev curl -s ifconfig.me || echo "UNKNOWN"
          }

          PREV_IP=$(get_current_ip)
          echo "üåç Initial IP: $PREV_IP"

          COUNTRIES=("United_States" "Canada" "Germany" "France" "Netherlands" 
                     "Australia" "Japan" "Sweden" "Spain" "Italy" "South_Korea")

          while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            
            # Stop after 5 hours (GitHub Actions limit)
            if [ "$elapsed_time" -ge 18000 ]; then
              echo "üïí 5-hour time limit reached. Exiting."
              break
            fi

            echo "üöÄ Running get_audiences.R..."
            docker exec r-dev Rscript /workspace/get_audiences.R
            EXIT_CODE=$?

            if [ -f status.txt ] && grep -q "VPN_ROTATION_NEEDED" status.txt; then
              echo "üîÑ VPN Rotation Needed! Switching server..."
              
              while true; do
                RANDOM_COUNTRY=${COUNTRIES[$RANDOM % ${#COUNTRIES[@]}]}
                echo "üåç Connecting to: $RANDOM_COUNTRY"
                
                # Disconnect and force a reset
                docker exec nordvpn nordvpn disconnect
                sleep 5
                
                # Connect to new random country
                docker exec nordvpn nordvpn connect "$RANDOM_COUNTRY"
                sleep 10  

                # Ensure VPN is fully connected before proceeding
                for i in {1..5}; do
                  VPN_STATUS=$(docker exec nordvpn nordvpn status 2>&1 || echo "Error")
                  echo "VPN Status Output: $VPN_STATUS"

                  if echo "$VPN_STATUS" | grep -q "Connected"; then
                    echo "‚úÖ VPN Connected!"
                    break
                  fi

                  echo "‚è≥ Waiting for VPN to establish... Attempt $i/5"
                  sleep 5
                done

                # Get the new IP
                NEW_IP=$(get_current_ip)
                echo "üîé New IP: $NEW_IP"

                if [ "$NEW_IP" != "$PREV_IP" ] && [ "$NEW_IP" != "UNKNOWN" ]; then
                  echo "‚úÖ VPN Rotation Successful! New IP: $NEW_IP"
                  PREV_IP=$NEW_IP
                  break  # Exit VPN rotation loop
                else
                  echo "‚ùå VPN IP did not change. Retrying another country..."
                  sleep 5
                fi
              done

              echo "üîÑ Retrying get_audiences.R after VPN change..."
              rm status.txt  # Reset status
              continue  # Restart the loop to re-run get_audiences.R
            fi

            # Continue looping
            echo "‚è≥ Waiting 30 seconds before the next iteration..."
            sleep 30
          done